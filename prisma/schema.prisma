// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  year       Int
  title      String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  students   Student[]
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFeculty   AcademicFaculty @relation(fields: [academicFecultyId], references: [id])
  academicFecultyId String
  students          Student[]
  faculties         Faculty[]
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment    AcademicDepartment @relation(fields: [academicDepeartmentId], references: [id])
  academicDepeartmentId String

  academicFeculty   AcademicFaculty @relation(fields: [academicFecultyId], references: [id])
  academicFecultyId String
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFeculty   AcademicFaculty @relation(fields: [academicFecultyId], references: [id])
  academicFecultyId String
  courses     CourseFaculty[]
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseTOPrerequisite[] @relation("CourseToPrerequisite")
  PreRequisiteFor CourseTOPrerequisite[] @relation("prerequisiteToCourse")
  faculties   CourseFaculty[]
}

model CourseTOPrerequisite {
  courseId       String
  prerequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  prerequisite Course @relation(fields: [prerequisiteId], references: [id], name: "prerequisiteToCourse")

  @@id([courseId, prerequisiteId])
}

model CourseFaculty {
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  faculty   Faculty @relation(fields: [facultyId], references: [id])
  facultyId String

  @@id([courseId, facultyId])
}
